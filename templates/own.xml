<templateSet group="own">
  <template name="tp" value="${$END$}" description="String template" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fn" value="($params$) =&gt; {&#10;    $end$&#10;}" description="ES6 Function" toReformat="true" toShortenFQNames="true">
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fns" value="($params$) =&gt; $end$" description="ES6 Function (short)" toReformat="true" toShortenFQNames="true">
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="lod" value="import $IMPORT$ from 'lodash';" description="Add lodash" toReformat="true" toShortenFQNames="true">
    <variable name="IMPORT" expression="" defaultValue="&quot;_&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cls" value="/**&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @class: $name$&#10; * @scope:&#10; * @date: $date$&#10; * @time: $time$&#10; */&#10;export class $name$ {&#10;    $end$&#10;}&#10; " description="Create new javascript class" toReformat="true" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <variable name="name" expression="capitalize(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="false" />
    <variable name="end" expression="" defaultValue="// code..." alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ver" value="### $end$ ($date$)" description="Version Tag" toReformat="true" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="1.0.0" alwaysStopAt="false" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="react" value="import React from 'react';" description="Import react" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="chunk" value="import(/* webpackChunkName: &quot;$name$&quot; */ '$name$')" description="Create import chunk" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="redux-comp" value="/**&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @class: $name$Component&#10; * @date: $date$&#10; * @time: $time$&#10; */&#10;import * as React from 'react';&#10;import { connect }              from 'react-redux';&#10;&#10;const mapStateToProps    = ( state ) =&gt; ({});&#10;const mapDispatchToProps = ( dispatch ) =&gt; ({});&#10;&#10;@connect(mapStateToProps, mapDispatchToProps)&#10;export class $name$ extends React.PureComponent&lt;{}, {}&gt; {&#10;&#10;    /**&#10;     * Render Function&#10;     * @returns {React.ReactNode}&#10;     */&#10;    public render (): React.ReactNode{&#10;        return (&#10;            $end$        &#10;        );&#10;    }&#10;}&#10;" description="Redux component" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="true" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="reducer" value="// @flow&#10;/**&#10; * $NAME$ Reducer&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @date: $date$&#10; * @time: $time$&#10; */&#10;import { Map }     from 'immutable';&#10;import { Reducer } from '../../Reducer';&#10;import * as TYPES  from './types';&#10;&#10;const DEFAULT_STATE = Map({});&#10;&#10;export default class  $NAME$Reducer extends Reducer {&#10;    NAME  = '$NAME$';&#10;    alias = {};&#10;    &#10;    /**&#10;     *&#10;     * @return {*|Immutable.Map&lt;any, any&gt;|Immutable.Map&lt;string, Array|{}|boolean&gt;}&#10;     */&#10;    onDefault ( state = DEFAULT_STATE ) {&#10;        return state;&#10;    }&#10;}&#10;" description="Redux reducer" toReformat="false" toShortenFQNames="true">
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="comps" value="/**&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @class: $name$&#10; * @date:  $date$&#10; * @time:  $time$&#10; * @scope:&#10; */&#10;import React from 'react';&#10;import styled from 'styled-components';&#10;&#10;const Style = styled.$el$`&#10;    $style$&#10;`; &#10;&#10;export class $name$ extends React.PureComponent {&#10;    /**&#10;     * Render Function&#10;     */&#10;    render () {&#10;        return (&#10;            &lt;Style&gt;&#10;                $end$&#10;            &lt;/Style&#10;        );&#10;    }&#10;}&#10;" description="Create React Component Styled" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <variable name="el" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="style" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="stc" value="import styled from 'styled-components';&#10;&#10;const Style = styled.$el$`$end$`;&#10;" description="Add Styled component" toReformat="false" toShortenFQNames="true">
    <variable name="el" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="sti" value="import styled$END$ from 'styled-components';" description="Add Styled component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rc" value="/**&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @class: $name$&#10; * @date:  $date$&#10; * @time:  $time$&#10; * @scope:&#10; */&#10;import React from 'react';&#10;import PropTypes from 'prop-types';&#10;import styled from 'styled-components';&#10;&#10;const Style = styled.div`&#10;`;&#10;&#10;export class $name$ extends React.PureComponent {&#10;    static defaultName  = '$name$';&#10;    static propTypes = {};&#10;    static defaultProps = {};&#10;    &#10;    /**&#10;     * Render $name$ Component&#10;     */&#10;    render() {&#10;        return (&#10;            &lt;Style&gt;&#10;                $END$&#10;            &lt;/Style&gt;&#10;        );&#10;    }&#10;}&#10;&#10;" description="Create React Component" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcr" value="/**&#10; * @author: Dumitrana Alinus &lt;alin.designstudio@gmail.com&gt;&#10; * @class: $name$&#10; * @date:  $date$&#10; * @time:  $time$&#10; * @scope:&#10; */&#10;import React from 'react';&#10;import PropTypes from 'prop-types';&#10;import styled from 'styled-components';&#10;import { connect } from 'app/src/lib/connect';&#10;&#10;const Style = styled.div`&#10;`;&#10;&#10;@connect()&#10;export class $name$ extends React.PureComponent {&#10;    static defaultName  = '$name$';&#10;    static propTypes = {};&#10;    static defaultProps = {};&#10;    &#10;    /**&#10;     * Render $name$ Component&#10;     */&#10;    render() {&#10;        return (&#10;            &lt;Style&gt;&#10;                $END$&#10;            &lt;/Style&gt;&#10;        );&#10;    }&#10;}&#10;&#10;" description="Create React Component Redux" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="date" expression="date()" defaultValue="" alwaysStopAt="false" />
    <variable name="time" expression="time()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ddi" value="const { dd } = require('dumper.js');" description="Import dd" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="if" value="{ $condition$ ? (&#10;    $then$&#10;) : $end$ }" description="React component: if condition" toReformat="true" toShortenFQNames="true">
    <variable name="condition" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="then" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="end" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="false" />
    <context>
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="sfc" value="export const $name$ = () =&gt; (&#10;    &lt;div&gt;&lt;/div&gt;&#10;);&#10;" description="Create React SFC" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>